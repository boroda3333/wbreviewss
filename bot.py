import pandas as pd
import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    Application,
    CallbackQueryHandler
)
import io
import logging
import asyncio
from collections import defaultdict

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "8069123763:AAFQDiopJ6fEHkqEGlLHk7A4S5Tpnc2iVBo"

reply_keyboard = [["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∑—ã–≤—ã"]]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)

user_sessions = {}


class UserSession:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self, user_id):
        self.user_id = user_id
        self.current_file = None
        self.processing = False

    async def process_file(self, file_bytes):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
        self.processing = True
        try:
            df = pd.read_excel(file_bytes)
            df.columns = df.columns.str.lower()

            required_columns = ['–∞—Ä—Ç–∏–∫—É–ª', '–æ—Ç–∑—ã–≤', '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ', '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ']
            if not all(col in df.columns for col in required_columns):
                missing = [col for col in required_columns if col not in df.columns]
                return False, f"–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}"

            nm_ids = df['–∞—Ä—Ç–∏–∫—É–ª'].astype(str).unique()
            feedbacks_by_nm = await self.get_feedbacks_for_nm_ids(nm_ids)

            result_df = pd.DataFrame(columns=[
                '–ê—Ä—Ç–∏–∫—É–ª', '–æ—Ç–∑—ã–≤', '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ', '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ',
                '–°—Ç–∞—Ç—É—Å', '–°—Ç–∞—Ç—É—Å (—ç–º–æ–¥–∑–∏)'
            ])

            for index, row in df.iterrows():
                nm_id = str(row['–∞—Ä—Ç–∏–∫—É–ª'])
                status = ""
                status_emoji = ""

                try:
                    feedbacks = feedbacks_by_nm.get(nm_id, [])
                    if not feedbacks:
                        status = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
                        status_emoji = "‚ö†Ô∏è"
                    else:
                        if await self.check_feedback_match(row, feedbacks):
                            status = "–ù–∞–π–¥–µ–Ω"
                            status_emoji = "‚úÖ"
                        else:
                            status = "–ù–µ –Ω–∞–π–¥–µ–Ω"
                            status_emoji = "‚ùå"
                except Exception as e:
                    status = f"–û—à–∏–±–∫–∞: {str(e)}"
                    status_emoji = "‚õî"

                result_df.loc[len(result_df)] = [
                    nm_id,
                    str(row['–æ—Ç–∑—ã–≤']) if pd.notna(row['–æ—Ç–∑—ã–≤']) else "",
                    str(row['–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ']) if pd.notna(row['–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ']) else "",
                    str(row['–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ']) if pd.notna(row['–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ']) else "",
                    status,
                    status_emoji
                ]

            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                result_df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
                workbook = writer.book
                worksheet = writer.sheets['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã']
                worksheet.set_column('A:A', 15)
                worksheet.set_column('B:D', 50)
                worksheet.set_column('E:E', 15)
                worksheet.set_column('F:F', 10)

            output.seek(0)
            return True, output

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}: {str(e)}")
            return False, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        finally:
            self.processing = False

    async def get_feedbacks_for_nm_ids(self, nm_ids):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
        feedbacks_by_nm = {}

        for nm_id in set(nm_ids):
            try:
                headers = {
                    'accept': '*/*',
                    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 YaBrowser/25.6.0.0 Safari/537.36',
                }

                params = {'appType': '1', 'curr': 'rub', 'dest': '-1255987', 'nm': nm_id}

                product_response = requests.get(
                    'https://card.wb.ru/cards/v4/list',
                    params=params,
                    headers=headers,
                    timeout=10
                )
                product_data = product_response.json()

                if not product_data.get('products'):
                    continue

                root_id = product_data['products'][0]['root']

                feedback_urls = [
                    f'https://feedbacks2.wb.ru/feedbacks/v2/{root_id}',
                    f'https://feedbacks1.wb.ru/feedbacks/v2/{root_id}'
                ]

                for url in feedback_urls:
                    try:
                        response = requests.get(url, headers=headers, timeout=10)
                        data = response.json()
                        if data.get('feedbacks'):
                            feedbacks_by_nm[nm_id] = data['feedbacks']
                            break
                    except:
                        continue

                await asyncio.sleep(0.5)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {nm_id}: {str(e)}")
                continue

        return feedbacks_by_nm

    async def check_feedback_match(self, row, feedbacks):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
        review_text = str(row['–æ—Ç–∑—ã–≤']).lower() if pd.notna(row['–æ—Ç–∑—ã–≤']) else ""
        pros_text = str(row['–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ']).lower() if pd.notna(row['–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ']) else ""
        cons_text = str(row['–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ']).lower() if pd.notna(row['–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ']) else ""

        for fb in feedbacks:
            fb_text = fb.get('text', '').lower()
            fb_pros = fb.get('pros', '').lower()
            fb_cons = fb.get('cons', '').lower()

            if review_text:
                if review_text in fb_text:
                    return True
            else:
                if (pros_text and pros_text in fb_pros) or (cons_text and cons_text in fb_cons):
                    return True
        return False


async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession(user_id)

    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: '–∞—Ä—Ç–∏–∫—É–ª', '–æ—Ç–∑—ã–≤', '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ', '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ'.",
        reply_markup=markup
    )


async def handle_document(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession(user_id)

    session = user_sessions[user_id]

    if session.processing:
        await update.message.reply_text("–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∞–π–ª –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    try:
        file = await update.message.document.get_file()
        file_bytes = io.BytesIO()
        await file.download_to_memory(out=file_bytes)
        file_bytes.seek(0)

        await update.message.reply_text("‚è≥ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...", reply_markup=ReplyKeyboardRemove())

        success, result = await session.process_file(file_bytes)

        if success:
            await update.message.reply_document(
                document=result,
                filename=f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø—Ä–æ–≤–µ—Ä–∫–∏_{user_id}.xlsx',
                caption='üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤',
                reply_markup=markup
            )
        else:
            await update.message.reply_text(result, reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=markup)


async def cancel(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    user_id = update.effective_user.id
    if user_id in user_sessions:
        del user_sessions[user_id]
    await update.message.reply_text("–°–µ–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('cancel', cancel))
    application.add_handler(MessageHandler(filters.Regex(r'^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∑—ã–≤—ã$'), start))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    application.run_polling()


if __name__ == '__main__':
    main()